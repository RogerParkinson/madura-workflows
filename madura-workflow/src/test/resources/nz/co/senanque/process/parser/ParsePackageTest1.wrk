/* 
Copyright (c)2014 Prometheus Consulting

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
package nz.co.senanque.process.parser;

queue: name="OrderSupervisor" 
    permission="SUPERVISOR" 
    read-permission="STOCKSUPERVISOR";

process: Order "AcceptOrder" {
	try {
		message=MyMessage;
	}
	catch (error) {
		compute=orderCompute;
		retry;
	}
	catch (abort) {
		compute=orderCompute;
		retry;
	}
}  

process: OrderItem "OrderItemProcess" { // the context has been moved to the specific OrderItem
    if (approved) { // always a boolean so no value>100 etc here
        message=ReserveStockForm;
    } else {
        message=BackOrder;
    }
}  

process: Order "DoOrder" {
	form=InitialForm queue="OrderSupervisor";
	do {
		compute=orderItemCompute arg1="val1" arg2="10";
	} for orderItems;
	compute=orderCompute;
}

process: Order "DoOrder2" {
	form=InitialForm;
	do "OrderItemProcess" for orderItems;
	compute=orderCompute;
}

process: Order "DoOrder3" {
	form=InitialForm;
	do "OrderItemProcess" for orderItems;
	compute=orderCompute;
}

process: OrderItem "OrderItemProcess2" {
    if (approved) { // always a boolean so no value>100 etc here
        message=ReserveStockForm;
    } else {
        message=BackOrder;
    }
}  

process: Order "DoOrder4" {
	form=InitialForm;
	if (decisionField) {
        try {
	       form=SecondForm;
        }
        catch (timeout=10) {
           form=SupervisorForm;
           retry;
        }
		if (rejected) {
			message=Reject;
		}
		else {
			message=Okay;
		}
	}
	message=Submit;
}        

process: Order "DoOrder5" {
    try {
        form=InitialForm;
        do "OrderItemProcess" for orderItems;
        compute=orderCompute;
        message=Submit;
        }
    catch (abort) {
        form=SupervisorForm;
        if (retryFlag) {
            retry;
        }
    }
}

