<?xml version="1.0" encoding="UTF-8"?>
<!-- 
Copyright (c)2014 Prometheus Consulting

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<!--
There may be a bug in the xsd files in Spring Integration, or I may have a caching problem, not sure.
But this is why there are two explicit version references to xsd files in this header.
You also need to add a catalog mapping entry to Eclipse:
Entry element:		URI
Location:			http://www.springframework.org/schema/integration/spring-integration-3.0.xsd
URI:   				http://www.springframework.org/schema/integration/spring-integration-3.0.xsd
Key type:			Namespace name
Key:				http://www.springframework.org/schema/integration/spring-integration-1.0.xsd
(Windows->preferences->XML->XML Catalog->Add)  
-->
<beans xmlns="http://www.springframework.org/schema/beans" 
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:int="http://www.springframework.org/schema/integration"
    xmlns:tx="http://www.springframework.org/schema/tx" 
    xmlns:util="http://www.springframework.org/schema/util"
    xmlns:security="http://www.springframework.org/schema/security" 
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:int-stream="http://www.springframework.org/schema/integration/stream" 
    xmlns:int-xml="http://www.springframework.org/schema/integration/xml" 
    xmlns:int-ws="http://www.springframework.org/schema/integration/ws"
    xmlns:ws="http://www.springframework.org/schema/web-services" 
    xmlns:task="http://www.springframework.org/schema/task"
    xmlns:oxm="http://www.springframework.org/schema/oxm"
    xsi:schemaLocation=" 
        http://www.springframework.org/schema/integration/stream http://www.springframework.org/schema/integration/stream/spring-integration-stream.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/integration http://www.springframework.org/schema/integration/spring-integration-3.0.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/integration/xml http://www.springframework.org/schema/integration/xml/spring-integration-xml-3.0.xsd
        http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/integration/ws http://www.springframework.org/schema/integration/ws/spring-integration-ws-3.0.xsd
	    http://www.springframework.org/schema/web-services http://www.springframework.org/schema/web-services/web-services.xsd
        http://www.springframework.org/schema/oxm http://www.springframework.org/schema/oxm/spring-oxm.xsd
        http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd">

    <description>Spring Integration Configuration</description>
    
    <int:channel id="orderChannel" />
    <int:channel id="orderReplyChannel" />
    <int:channel id="recoverChannel" />

    <!--
    OrderChannel accepts a message and transforms it to a call to the public FahrenheitToCelsius web service.
    This is a synchronous service and the response will be sent to orderReplyChannel because we coded that
    into the message before it got here.
    If the message fails it will be retried according to the retry template. But if it still retries a message is
    delivered to recoverChannel. Note that failures come in two kinds, retryable and non-retryable. The retryable
    exceptions are listed in the retryTemplate confguration.
    -->
    <int:chain input-channel="orderChannel">
        <!-- The delayer ensures the message is sent in a different thread from the sender -->
        <int:delayer id="delayer" default-delay="3000" />
	    <int-xml:xslt-transformer
            xsl-resource="classpath:nz/co/senanque/workflow/WorkflowRetryTransformer.xsl"/>
        <int-ws:header-enricher>
            <int-ws:soap-action value="http://www.w3schools.com/webservices/FahrenheitToCelsius" />
        </int-ws:header-enricher>

        <int-ws:outbound-gateway uri="http://www.w3schools.com/webservices/tempconvert.asmx" >            
            <int-ws:request-handler-advice-chain>
                <bean class="org.springframework.integration.handler.advice.RequestHandlerRetryAdvice">
                    <property name="recoveryCallback">
                        <bean
                            class="org.springframework.integration.handler.advice.ErrorMessageSendingRecoverer">
                            <constructor-arg ref="recoverChannel" />
                        </bean>
                    </property>
                    <property name="retryTemplate" ref="retryTemplate" />
                </bean>
            </int-ws:request-handler-advice-chain>
        </int-ws:outbound-gateway>
    </int:chain>

    <bean id="retryTemplate" class="org.springframework.retry.support.RetryTemplate">
        <property name="retryPolicy">
            <bean class="org.springframework.retry.policy.SimpleRetryPolicy">
                <constructor-arg index="0" value="3" />
                <constructor-arg index="1">
                    <map>
                        <!-- retryable (assuming target is down) -->
                        <entry key="org.springframework.integration.MessagingException" value="true" />
                        <entry key="nz.co.senanque.messaging.WorkflowRetryableException" value="true" />
                    </map>
                </constructor-arg>
            </bean>
        </property>
        <property name="backOffPolicy">
            <bean class="org.springframework.retry.backoff.ExponentialBackOffPolicy">
                <property name="initialInterval" value="1000" />
                <property name="multiplier" value="1" />
            </bean>
        </property>
    </bean>

    <!--
    The orderReplyChannel gets the response and transforms it into a Document (org.w3c.dom.Document). 
    The endpoint is generic and accepts a Document that it unpacks into the context object with appropriate 
    locking and database fetching etc. If there is a problem invoking the endpoint (eg locking) then the retryTemplate
    will retry it.
    -->
    <int:chain input-channel="orderReplyChannel">
        <int-xml:xslt-transformer
            xsl-resource="classpath:nz/co/senanque/workflow/WorkflowRetryTransformer2.xsl"/>
         <int:service-activator ref="genericEndpoint" method="issueResponseFor" >
            <int:request-handler-advice-chain>
                <bean class="org.springframework.integration.handler.advice.RequestHandlerRetryAdvice">
                    <property name="recoveryCallback">
                        <bean
                            class="org.springframework.integration.handler.advice.ErrorMessageSendingRecoverer">
                            <constructor-arg ref="recoverChannel" />
                        </bean>
                    </property>
                    <property name="retryTemplate" ref="retryTemplate" />
                </bean>
            </int:request-handler-advice-chain>
        </int:service-activator>
    </int:chain>

    <bean id="marshallingTransformer" class="org.springframework.integration.xml.transformer.MarshallingTransformer">
        <constructor-arg ref="marshaller"/>
        <constructor-arg>
            <bean class="org.springframework.integration.xml.transformer.ResultToDocumentTransformer" />
        </constructor-arg>
    </bean>
    <bean id="marshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
    	<property name="contextPath" value="nz.co.senanque.workflowtest.instances"/>
    </bean>
<!-- 	<oxm:jaxb2-marshaller id="marshaller" contextPath="nz.co.senanque.workflowtest.instances"/> -->

    <!--
    This handles any case where the message is a org.springframework.integration.MessagingException
    It figures the relevant process Instance and aborts it. 
    -->
    <int:chain input-channel="recoverChannel">
        <int:service-activator ref="errorEndpoint" method="processErrorMessage">
            <int:request-handler-advice-chain>
                <bean class="org.springframework.integration.handler.advice.RequestHandlerRetryAdvice">
                    <property name="recoveryCallback">
                        <bean
                            class="org.springframework.integration.handler.advice.ErrorMessageSendingRecoverer">
                            <constructor-arg ref="recoverChannel" />
                        </bean>
                    </property>
                    <property name="retryTemplate" ref="retryTemplate" />
                </bean>
            </int:request-handler-advice-chain>
        </int:service-activator>
    </int:chain>
    
<!--     <bean id="integrationMBeanExporter" class="org.springframework.integration.monitor.IntegrationMBeanExporter" /> -->
    

</beans>