/*******************************************************************************
 * Copyright (c)2014 Prometheus Consulting
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *  http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *******************************************************************************/
package nz.co.senanque.workflowui;

import javax.servlet.annotation.WebListener;
import javax.servlet.annotation.WebServlet;

import nz.co.senanque.locking.LockFactory;
import nz.co.senanque.locking.simple.SimpleLockFactory;
import nz.co.senanque.madura.bundle.BundleExport;
import nz.co.senanque.vaadin.Hints;
import nz.co.senanque.vaadin.MaduraSessionManager;
import nz.co.senanque.vaadin.permissionmanager.PermissionManager;
import nz.co.senanque.vaadin.permissionmanager.PermissionManagerImpl;
import nz.co.senanque.workflow.WorkflowClient;
import nz.co.senanque.workflow.WorkflowDAO;
import nz.co.senanque.workflow.WorkflowJPA;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.PropertySource;
import org.springframework.context.annotation.Scope;
import org.springframework.context.annotation.ScopedProxyMode;
import org.springframework.context.support.MessageSourceAccessor;
import org.springframework.context.support.PropertySourcesPlaceholderConfigurer;
import org.springframework.web.context.ContextLoaderListener;

import com.vaadin.annotations.Theme;
import com.vaadin.annotations.Title;
import com.vaadin.annotations.Widgetset;
import com.vaadin.server.Page;
import com.vaadin.server.VaadinRequest;
import com.vaadin.spring.annotation.EnableVaadin;
import com.vaadin.spring.annotation.SpringUI;
import com.vaadin.spring.annotation.UIScope;
import com.vaadin.spring.server.SpringVaadinServlet;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.MenuBar;
import com.vaadin.ui.MenuBar.Command;
import com.vaadin.ui.MenuBar.MenuItem;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;

@Theme("mytheme")
@Title("Madura Workflow")
@Widgetset("com.vaadin.DefaultWidgetSet")
@SpringUI
public class WorkflowUI extends UI  {

	private static final long serialVersionUID = 1L;
	private static Logger log = LoggerFactory.getLogger(WorkflowUI.class);
	@Autowired private MaduraSessionManager m_maduraSessionManager;
//	@Autowired private MainLayout m_mainLayout;
	@Autowired private AboutWindow m_aboutWindow;
	@Autowired private PermissionManager m_permissionManager;

	private HorizontalLayout headingLayout;
	private HorizontalLayout headingButtonslLayout;
	private HorizontalLayout bodyLayout;
	private Label loggedInAs;

	private MenuBar menuBar;
	private VerticalLayout mainLayout;

    public WorkflowUI() {
        this.log.info(this.getClass().getSimpleName() + " constructor invoked");
    }

    @WebServlet(name = "MyUIServlet", urlPatterns = "/*", asyncSupported = true)
    public static class MyUIServlet extends SpringVaadinServlet {

		private static final long serialVersionUID = 1L;
    }

    @WebListener
    public static class MyContextLoaderListener extends ContextLoaderListener {
    	// This causes the applicationContext.xml context file to be loaded
    	// per session.
    }

    @Configuration
    @EnableVaadin
    @ComponentScan(basePackages = {
    		"nz.co.senanque.vaadin",			// madura-vaadin
    		"nz.co.senanque.validationengine",	// madura-objects
    		"nz.co.senanque.workflowui",
    		"nz.co.senanque.workflowui.bundles"})
    @PropertySource("classpath:config.properties")
    public static class MyConfiguration {
    	
    	public MyConfiguration() {
    		log.info("MyConfiguration"); // this gets called at application startup, not session startup so this is an app bean.
    	}

    	// needed for @PropertySource
    	@Bean
    	public static PropertySourcesPlaceholderConfigurer propertyConfigInDev() {
    		return new PropertySourcesPlaceholderConfigurer();
    	}
    	@Bean(name="hints")
    	@UIScope
    	@BundleExport
    	public Hints getHints() {
    		return new WorkflowUIHints();
    	}
    	@Bean(name="permissionManager")
    	@Scope(value="vaadin-ui", proxyMode = ScopedProxyMode.TARGET_CLASS)
    	@BundleExport
    	public PermissionManager getPermissionManager() {
    		PermissionManagerImpl ret = new PermissionManagerImpl();
    		return ret;
    	}
    	@Bean(name="workflowClient")
    	@UIScope
    	public WorkflowClient getWorkflowClient() {
    		return new WorkflowClient();
    	}
    	@Bean(name="workflowDAO")
    	@BundleExport
    	public WorkflowDAO getWorkflowDAO() {
    		return new WorkflowJPA();
    	}
//    	@Bean(name="bundleSelector")
//    	public BundleSelector getBundleSelector() {
//    		return new BundleSelectorImpl();
//    	}
    	@Bean(name="lockFactory")
    	@BundleExport
    	public LockFactory getLockFactory() {
    		return new SimpleLockFactory();
    	}
    }
    @Override
    public void init(VaadinRequest request) {
        this.log.info("initializing workflow application...");
    	MessageSourceAccessor messageSourceAccessor= new MessageSourceAccessor(m_maduraSessionManager.getMessageSource());
    	buildMainLayout(messageSourceAccessor);
    	setContent(mainLayout);
		final MenuBar.MenuItem file = createFileMenu(messageSourceAccessor);
		final MenuBar.MenuItem help = createHelpMenu(messageSourceAccessor);

    }
    private MenuBar.MenuItem createHelpMenu(final MessageSourceAccessor messageSourceAccessor) {
    	MenuBar.MenuItem help = menuBar.addItem(messageSourceAccessor.getMessage("help","Help"), null);
		help.addItem(messageSourceAccessor.getMessage("demo.script","GitHub"), new Command() {

			private static final long serialVersionUID = 1L;
			public void menuSelected(MenuItem selectedItem) {
				Page.getCurrent().open(messageSourceAccessor.getMessage("demo.url"), null);
			}});

		help.addItem(messageSourceAccessor.getMessage("about","About"), new Command(){

			private static final long serialVersionUID = -1L;

			public void menuSelected(MenuItem selectedItem) {
				m_aboutWindow.load();
			}
		});
		return help;
    }
    private MenuBar.MenuItem createFileMenu(final MessageSourceAccessor messageSourceAccessor) {
    	MenuBar.MenuItem file = menuBar.addItem(messageSourceAccessor.getMessage("file","File"), null);
		file.addItem(messageSourceAccessor.getMessage("logout","Logout"), new Command(){

			private static final long serialVersionUID = -1L;

			public void menuSelected(MenuItem selectedItem) {
				m_permissionManager.close(getUI());
			}
		});
		return file;
    }
	private VerticalLayout buildMainLayout(MessageSourceAccessor messageSourceAccessor) {
		// common part: create layout
		mainLayout = new VerticalLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("800px");
		mainLayout.setHeight("-1px");
		mainLayout.setMargin(false);
		
		// top-level component properties
		setWidth("800px");
		setHeight("-1px");
		
//		// headingLayout
//		headingLayout = buildHeadingLayout(messageSourceAccessor);
//		mainLayout.addComponent(headingLayout);
//		
//		// headingButtonslLayout
		headingButtonslLayout = buildHeadingButtonslLayout(messageSourceAccessor);
		mainLayout.addComponent(headingButtonslLayout);
//		
//		// bodyLayout
//		bodyLayout = buildBodyLayout(messageSourceAccessor);
//		mainLayout.addComponent(bodyLayout);
		
		return mainLayout;
	}

    public String getVersion()
    {
    	return new MessageSourceAccessor(m_maduraSessionManager.getMessageSource()).getMessage("version", null,"NOVERSION");
    }

	@Override
	public void markAsDirty() {
		// TODO Auto-generated method stub
		
	}
	private HorizontalLayout buildHeadingButtonslLayout(MessageSourceAccessor messageSourceAccessor) {
		// common part: create layout
		headingButtonslLayout = new HorizontalLayout();
		headingButtonslLayout.setStyleName("heading-buttons");
		headingButtonslLayout.setImmediate(false);
		headingButtonslLayout.setWidth("100.0%");
		headingButtonslLayout.setHeight("26px");
		headingButtonslLayout.setMargin(false);
		
		// menuBar_1
		menuBar = new MenuBar();
		menuBar.setImmediate(false);
		menuBar.setWidth("-1px");
		menuBar.setHeight("-1px");
		headingButtonslLayout.addComponent(menuBar);
		
		// loggedInAs
		loggedInAs = new Label();
		loggedInAs.setStyleName("heading-button");
		loggedInAs.addStyleName("v-textfield-align-right");
		loggedInAs.setImmediate(false);
		loggedInAs.setWidth("-1px");
		loggedInAs.setHeight("-1px");
		String loggedInAsString = messageSourceAccessor.getMessage("logged.in.as",new String[]{m_permissionManager.getCurrentUser()});
		loggedInAs.setValue(loggedInAsString);
		headingButtonslLayout.addComponent(loggedInAs);
		headingButtonslLayout.setComponentAlignment(loggedInAs, Alignment.MIDDLE_RIGHT);
		
		return headingButtonslLayout;
	}

}

